{"componentChunkName":"component---src-templates-post-template-js","path":"/../../static/custom-hooks-of-finda","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"id":"94e1dfa9-c5d1-5af3-aaa2-0f6569fbeac5","html":"<blockquote>\n<p><a href=\"https://medium.com/finda-tech/%ED%95%80%EB%8B%A4%EC%97%90%EC%84%9C-%EC%93%B0%EB%8A%94-react-custom-hooks-1a732ce949a5\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">핀다 기술블로그에 기고한 글</a>입니다.</p>\n</blockquote>\n<p>이 글은 핀다 프론트엔드 팀에서 사용하는 <strong>custom hooks</strong> 몇 가지와 어떤 것을 custom hook으로 만들어야 하는지에 대해서 이야기합니다.</p>\n<hr>\n<p>2019년 초, React Hooks가 정식으로 릴리즈 된 이후 많은 서비스들이 빠르게 hooks를 도입하였습니다. 핀다도 작년 4분기, 네이티브 웹뷰 개발 프로젝트를 시작으로 최근 런칭한 <a href=\"https://service.finda.co.kr/loan-application/web\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">웹 최저금리 조회 서비스</a>까지 대부분의 프로젝트에서 hooks를 적극 도입하여 사용하고 있습니다.\n일반적으로 hooks의 장점으로 꼽히는 것들은 다음과 같습니다.</p>\n<ol>\n<li>클래스 컴포넌트보다 적은 양의 코드로 동일한 로직을 구현할 수 있다.</li>\n<li>코드 양이 적지만 명료함을 잃지 않는다. (<code class=\"language-text\">useSomething</code>)</li>\n<li>상태관리 로직의 재활용이 가능하다.</li>\n</ol>\n<p>특히 세 번째로 언급한 상태관리 로직의 재활용은 hooks의 꽃이라고 할 수 있으며 오늘 이야기할 custom hooks와 관련이 깊습니다.</p>\n<h2 id=\"rules-of-hooks\"><a href=\"#rules-of-hooks\" aria-label=\"rules of hooks permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rules of Hooks</h2>\n<p>Hooks가 위와 같은 매력적인 장점들을 얻기 위해서는 <a href=\"https://reactjs.org/docs/hooks-rules.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Rules of Hooks</a> 라고 소개된 몇 가지 규칙들을 준수해야 합니다.</p>\n<p>React에서 기본으로 제공하는 Hooks(<code class=\"language-text\">useState</code>, <code class=\"language-text\">useEffect</code>, <code class=\"language-text\">useReducer</code>···)는 Rules of Hooks만 지켜준다면 크게 문제될 것이 없습니다.</p>\n<p>하지만 오늘 이야기할 custom hooks는 조금 다릅니다. 몇 가지 규칙을 더 고려해주어야 합니다. 만약 이를 고려하지 않고 custom hooks를 잘못 정의하여 사용한다면 <strong>예측하지 못한 동작</strong>들을 만들어 낼뿐만 아니라, <strong>디버깅</strong>까지 어렵게 만들 수 있습니다.</p>\n<p>이 글 후반부에서는 Dan abramov씨가 <a href=\"https://overreacted.io/ko/why-isnt-x-a-hook/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">블로그 포스트</a>에서 제시한 관점을 기준으로 어떤 것이 custom hook으로 적합하고, 적합하지 않은지에 대해서 이야기 할 것입니다.</p>\n<hr>\n<p>이제 핀다가 쓰고 있는 custom hooks를 몇 가지 살펴보겠습니다.</p>\n<h2 id=\"useprevious\"><a href=\"#useprevious\" aria-label=\"useprevious permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>usePrevious</h2>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">usePrevious</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> ref <span class=\"token operator\">=</span> <span class=\"token function\">useRef</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    ref<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\n  <span class=\"token keyword\">return</span> ref<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> usePrevious<span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">usePrevious</code>는 이전 렌더링에서의 값을 기억해두어야 하는 경우에 사용할 수 있습니다. 현재 렌더링과 이전 렌더링의 값을 비교할 필요가 있을 때 사용합니다. 다음과 같이 말이죠.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">MyComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>alphabet<span class=\"token punctuation\">,</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> prevAlphabet <span class=\"token operator\">=</span> <span class=\"token function\">usePrevious</span><span class=\"token punctuation\">(</span>alphabet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>alphabet <span class=\"token operator\">===</span> <span class=\"token string\">'C'</span> <span class=\"token operator\">&amp;&amp;</span> prevAlphabet <span class=\"token operator\">===</span> <span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>alphabet<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 컴포넌트는 <em>”<code class=\"language-text\">alphabet</code> 의 현재값이 <code class=\"language-text\">C</code>이고, 이전값이 <code class=\"language-text\">B</code> 라면 특정 액션을 수행해라”</em> 라는 로직을 수행하고 있습니다. 바로 이전 상태값을 저장하는 <code class=\"language-text\">usePrevious</code> 로직이 custom hook 내부로 들어가 컴포넌트는 깔끔한 상태를 유지하고 있습니다.</p>\n<hr>\n<p>참고로 <code class=\"language-text\">usePrevious</code> 내부에서 값을 저장할 때 <code class=\"language-text\">useState</code> 가 아닌 <code class=\"language-text\">useRef</code> 를 쓴 이유는 불필요한 re-rendering을 방지하기 위해서입니다. <code class=\"language-text\">usePrevious</code> 가 반환하는 값은 바로 당장 UI를 그리는 데에는 영향을 주지 않기 때문에 <code class=\"language-text\">usePrevious</code> 내부에서의 값 변경이 re-rendering을 유발하게 두어서는 안됩니다.</p>\n<blockquote>\n<p>useState 의 값 변경은 re-rendering을 유발하지만 useRef의 값 변경은 그렇지 않습니다. (<a href=\"https://www.codebeast.dev/usestate-vs-useref-re-render-or-not/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">관련링크</a>)</p>\n</blockquote>\n<p>만약 <code class=\"language-text\">useState</code> 를 이용했다면 <code class=\"language-text\">alphabet</code> 값이 바뀔 때마다 렌더링이 두 번씩 일어날 것입니다. (<code class=\"language-text\">alphabet</code> 변경에 대한 re-rendering + <code class=\"language-text\">prevAlphabet</code> 변경에 대한 re-rendering)</p>\n<h2 id=\"useinput\"><a href=\"#useinput\" aria-label=\"useinput permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useInput</h2>\n<p><code class=\"language-text\">useInput</code>은 핀다에서 가장 많이 사용하고 있는 custom hook입니다. 이름에서 알려주듯 input 컴포넌트와 함께 사용됩니다.</p>\n<p>어떻게 사용하는지를 먼저 보여드리겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> onChangeInputValue<span class=\"token punctuation\">,</span> isValid<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">,</span>\n    maxValue<span class=\"token punctuation\">:</span> <span class=\"token number\">10000</span><span class=\"token punctuation\">,</span>\n    autoFix<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">onSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isValid<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">submitValue</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>form onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n      <span class=\"token operator\">&lt;</span>input\n        value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">}</span>\n        onChange<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onChangeInputValue<span class=\"token punctuation\">}</span>\n      <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n      <span class=\"token punctuation\">{</span><span class=\"token comment\">/* ... */</span><span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>form<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useInput</code> 은 사용자 입력 값을 검증하는 event handler 로직을 추상화하기 위해서 만들어졌습니다. 사용자의 입력값은 숫자일 때도 있고 문자일 때도 있습니다. 숫자라면 최솟값이나 최댓값이 있을 수 있고, 문자인 경우 최대 길이가 있을 수 있습니다.</p>\n<p>이러한 것들을 검증하는 로직이 컴포넌트 내부에 있을 필요는 없습니다. 또한 대부분의 검증 로직이 유사하기 때문에 이를 useInput 내부로 추상화시킬 수 있습니다.</p>\n<p>이 hook을 사용하는 컴포넌트에서는 자신이 사용할 input 컴포넌트에 필요한 옵션만 명시해주면 됩니다.</p>\n<p>자세한 로직이 궁금하신 분은 코드를 참고해 주시기 바랍니다!</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useCallback<span class=\"token punctuation\">,</span> useRef <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> removeNonNumeric<span class=\"token punctuation\">,</span> parseNumWithMaxValue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/utils/StringUtils'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Options</span> <span class=\"token punctuation\">{</span>\n  initialValue<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  maxValue<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  minValue<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  maxLength<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  minLength<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  autoFix<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">type</span><span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'number'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">type</span> returnType <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useInput</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">options<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> Options</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> returnType <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n    maxValue<span class=\"token punctuation\">,</span>\n    minValue<span class=\"token punctuation\">,</span>\n    initialValue<span class=\"token punctuation\">,</span>\n    maxLength<span class=\"token punctuation\">,</span>\n    minLength <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    autoFix <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">type</span> <span class=\"token operator\">=</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> options <span class=\"token operator\">||</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> setValue<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> useState<span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>initialValue <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> isValid <span class=\"token operator\">=</span> useRef<span class=\"token operator\">&lt;</span><span class=\"token builtin\">boolean</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleNumber <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">receivedValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> receivedValue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> <span class=\"token function\">parseNumWithMaxValue</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> returnValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> autoFix <span class=\"token operator\">?</span> result <span class=\"token punctuation\">:</span> receivedValue<span class=\"token punctuation\">;</span>\n    isValid<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> result <span class=\"token operator\">===</span> receivedValue\n      <span class=\"token operator\">&amp;&amp;</span> returnValue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> minLength\n      <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>minValue <span class=\"token operator\">?</span> minValue <span class=\"token operator\">&lt;=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>maxLength<span class=\"token punctuation\">,</span> minLength<span class=\"token punctuation\">,</span> maxValue<span class=\"token punctuation\">,</span> minValue<span class=\"token punctuation\">,</span> autoFix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> handleString <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">receivedValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> receivedValue<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxLength<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> maxLength<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> returnValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> autoFix <span class=\"token operator\">?</span> result <span class=\"token punctuation\">:</span> receivedValue<span class=\"token punctuation\">;</span>\n    isValid<span class=\"token punctuation\">.</span>current <span class=\"token operator\">=</span> result <span class=\"token operator\">===</span> receivedValue\n      <span class=\"token operator\">&amp;&amp;</span> returnValue<span class=\"token punctuation\">.</span>length <span class=\"token operator\">>=</span> minLength<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span>returnValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>maxLength<span class=\"token punctuation\">,</span> minLength<span class=\"token punctuation\">,</span> autoFix<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> onChangeInput <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e<span class=\"token punctuation\">:</span> React<span class=\"token punctuation\">.</span>ChangeEvent<span class=\"token operator\">&lt;</span>HTMLInputElement<span class=\"token operator\">></span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> targetValue<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>value <span class=\"token operator\">||</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">type</span> <span class=\"token operator\">===</span> <span class=\"token string\">'number'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleNumber</span><span class=\"token punctuation\">(</span><span class=\"token function\">removeNonNumeric</span><span class=\"token punctuation\">(</span>targetValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">handleString</span><span class=\"token punctuation\">(</span>targetValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">,</span> handleNumber<span class=\"token punctuation\">,</span> handleString<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">,</span> onChangeInput<span class=\"token punctuation\">,</span> isValid<span class=\"token punctuation\">.</span>current<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useInput<span class=\"token punctuation\">;</span></code></pre></div>\n<p>여기서도 <code class=\"language-text\">isValid</code> 상태값은 <code class=\"language-text\">useRef</code>로 선언하였습니다. 현재 렌더링에 영향을 주는 값이 아니기 때문입니다(re-rendering 방지). 반면 <code class=\"language-text\">value</code> 값은 당장 사용자에게 반영된 값을 보여줘야하기 때문에 <code class=\"language-text\">useState</code> 로 선언하였습니다.</p>\n<p><code class=\"language-text\">useInput</code>과 유사한 hook으로 <code class=\"language-text\">useDropdown</code>, <code class=\"language-text\">useCheckList</code>도 사용하고 있습니다.</p>\n<h2 id=\"usedocumentoverflow\"><a href=\"#usedocumentoverflow\" aria-label=\"usedocumentoverflow permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>useDocumentOverflow</h2>\n<p>글 초반에 custom hooks로 적절하지 않은 것이라고 판단된 hook이 있었다고 이야기 했습니다. <code class=\"language-text\">useDocumentOverflow</code>가 대표적인 예입니다.</p>\n<p><code class=\"language-text\">useDocumentOverflow</code>의 정의와 사용법은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// useDocumentOverflow.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> defaultOverflow<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">useDocumentOverflow</span><span class=\"token punctuation\">(</span>property<span class=\"token punctuation\">:</span> <span class=\"token string\">'hidden'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'scroll'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> bodyElement<span class=\"token punctuation\">:</span> HTMLBodyElement <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> previousOverflow<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> bodyElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>overflow <span class=\"token operator\">||</span> defaultOverflow<span class=\"token punctuation\">;</span>\n    bodyElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>overflow <span class=\"token operator\">=</span> property<span class=\"token punctuation\">;</span>\n \n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      bodyElement<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>overflow <span class=\"token operator\">=</span> previousOverflow<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>property<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// usage</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">SomeComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useDocumentOverflow</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">useDocumentOverflow</code> 는 Modal을 위해서 정의했던 hook입니다. 전체화면을 덮는 modal이 활성화돼있는 동안에 기존 화면이 스크롤 되는 것을 막기 위해서 <code class=\"language-text\">&lt;body&gt;</code> 의 <code class=\"language-text\">overflow</code> 값을 변경해야 했습니다.</p>\n<p>그래서 Modal 컴포넌트에서 이러한 로직을 수행하는 hook을 사용하도록 했고, <code class=\"language-text\">useDocumentOverflow</code>는 그 역할을 잘 수행해냈습니다.</p>\n<p><img src=\"/custom-hooks-of-finda/modal.png\" alt=\"photo\"></p>\n<blockquote>\n<h4 id=\"웹뷰에서-사용하는-드롭다운-modal\"><a href=\"#%EC%9B%B9%EB%B7%B0%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%93%9C%EB%A1%AD%EB%8B%A4%EC%9A%B4-modal\" aria-label=\"웹뷰에서 사용하는 드롭다운 modal permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>웹뷰에서 사용하는 드롭다운 Modal</h4>\n</blockquote>\n<br/>\n<p>하지만 이 로직은 hook으로 만들기에는 <strong>적합하지 않은 로직</strong>이었습니다. 어떤 이유에서 그런 걸까요?</p>\n<h2 id=\"동시에-사용할-수-있는가\"><a href=\"#%EB%8F%99%EC%8B%9C%EC%97%90-%EC%82%AC%EC%9A%A9%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94%EA%B0%80\" aria-label=\"동시에 사용할 수 있는가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동시에 사용할 수 있는가?</h2>\n<p><code class=\"language-text\">useDocumentOverflow</code>를 여러 컴포넌트에서 동시에 사용한다면 어떤 일이 일어날까요?</p>\n<p>컴포넌트 트리가 아래와 같을 때, 만약A 컴포넌트와 C 컴포넌트가 동시에 <code class=\"language-text\">useDocumentOverflow</code>를 사용한다면, 그리고 파라미터로 전달하는 값이 다르다면, 어떤 값이 <code class=\"language-text\">overflow</code> 값으로 적용돼야 하는 걸까요?</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 컴포넌트 트리</span>\n<span class=\"token operator\">&lt;</span><span class=\"token constant\">A</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token constant\">B</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">B</span><span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span><span class=\"token constant\">A</span><span class=\"token operator\">></span>\n<span class=\"token comment\">// A 컴포넌트</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useDocumentOverflow</span><span class=\"token punctuation\">(</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// C 컴포넌트</span>\n<span class=\"token keyword\">function</span> <span class=\"token constant\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">useDocumentOverflow</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>만약 규칙을 정하여, “최상단(혹은 최하단)에 있는 것이 우선권을 갖는다” 라고 하더라도 문제는 여전히 존재합니다.</p>\n<h2 id=\"디버깅하기-용이한가\"><a href=\"#%EB%94%94%EB%B2%84%EA%B9%85%ED%95%98%EA%B8%B0-%EC%9A%A9%EC%9D%B4%ED%95%9C%EA%B0%80\" aria-label=\"디버깅하기 용이한가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>디버깅하기 용이한가?</h2>\n<p>만약 바로 위에서 본 예제처럼, 컴포넌트에서 직접 <code class=\"language-text\">useDocumentOverflow</code>를 호출한다면 디버깅에 큰 문제가 없을 것입니다.</p>\n<p>하지만 컴포넌트가 사용하는 custom hook 내부에서 <code class=\"language-text\">useDocumentOverflow</code>를 호출한다면, 아니 더 깊은 hooks tree에서 <code class=\"language-text\">useDocumentOverflow</code>를 사용한다면 현재 적용된 <code class=\"language-text\">overflow</code>값이 어느 곳에서 적용된 것인지 찾아내는 것은 쉽지 않을 것입니다.\nA, B, C 컴포넌트 예제를 살짝 바꿔 각 컴포넌트가 아래 이미지와 같이 custom hooks를 사용하고 있다고 가정해보겠습니다. 붉은 색으로 표시한 custom hook은 <code class=\"language-text\">useDocumentOverflow</code>를 호출하는 custom hook입니다.\n만약 <code class=\"language-text\">overflow</code>값이 예상과 다르게 적용됐다면 원인을 찾기 위해 <strong>탐험</strong>을 시작해야 합니다.</p>\n<p>A 컴포넌트가 사용하는 hooks를 살펴본 후, 그 중 custom hooks가 있다면 모든 custom hooks의 내부를 살펴보고… 또 그 내부의 custom hooks를 살펴보고… B의 내부의 hooks를 (… 이하 생략)</p>\n<blockquote>\n<p><a href=\"https://overreacted.io/ko/the-bug-o-notation/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">디버깅과 시간복잡도에 관한 글</a></p>\n</blockquote>\n<p><img src=\"/custom-hooks-of-finda/custom-hooks-tree-example.png\" alt=\"photo\"></p>\n<blockquote>\n<h4 id=\"on²-o-n³\"><a href=\"#on%C2%B2-o-n%C2%B3\" aria-label=\"on² o n³ permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>O(n²) ,O( n³)…</h4>\n</blockquote>\n<br/>\n<br/>\n<p>그렇다면 <code class=\"language-text\">useDocumentOverflow</code>는 어떻게 써야할까요?</p>\n<p>애초에 모든로직을 hook으로 만들 필요는 없습니다. hooks가 주는 <strong>명료함</strong>에 매료되어 컴포넌트에서 사용하는 중복되는 모든 로직을 hook으로 만들고 싶은 마음이 들 수도 있습니다. 하지만 hook으로 만들었을 때의 장점과 단점을 고민해 보는 단계가 필요합니다.</p>\n<hr>\n<p>글 초반에 소개한 Dan Abramov의 <a href=\"https://overreacted.io/ko/why-isnt-x-a-hook/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">블로그 포스트</a>에서는 <strong>합성</strong>과 <strong>디버깅</strong> 관점에서 바라보는 것을 제안했습니다.</p>\n<p><code class=\"language-text\">useDocumentOverflow</code>는 위에서 보았듯이 두 관점에서 적절하지 않은 모습을 보여주었습니다.\n반면 앞서 소개한 <code class=\"language-text\">usePrevious</code>, <code class=\"language-text\">useInput</code>, <code class=\"language-text\">useDropdown</code>, <code class=\"language-text\">useCheckList</code>는 모두 여러 컴포넌트나 여러 hooks 내에서 사용된다 하더라도 문제가 없는 것들입니다.</p>\n<p>이쯤되니까 어떤 것이 hook으로 적합한지, 그렇지 않은지가 어렴풋이 보이는 것 같습니다.</p>\n<h2 id=\"공통적으로-사용하는-값인가\"><a href=\"#%EA%B3%B5%ED%86%B5%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EA%B0%92%EC%9D%B8%EA%B0%80\" aria-label=\"공통적으로 사용하는 값인가 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>공통적으로 사용하는 값인가?</h2>\n<p><code class=\"language-text\">useDocumentOverflow</code>는 다른 컴포넌트나 hook에서 공통적으로 접근할 수 있는 값을 다루고 있습니다. 이처럼 공통적으로 사용하는 값을 다루는 로직은 custom hook으로 만들기에 적합하지 않습니다</p>\n<p>Dan Abramov씨의 글에서는 custom hook으로 적합하지 않은 것의 예로 <code class=\"language-text\">react.memo</code>를 언급했습니다. re-rendering 여부를 결정하는 로직을 hook으로 만든 것입니다.</p>\n<p>re-rendering 여부 또한 (하나의 컴포넌트 내에서) 여러 hook들 간에 공통적으로 사용될 수 있는 값입니다.</p>\n<p>결국 <strong><em>“공유될 수 있는 값을 다루는가”</em></strong> 는 어떤 것을 hook으로 만들어야 하는가에 대한 합리적인 답변이 될 수 있을 듯합니다.</p>\n<h2 id=\"글을-마치며\"><a href=\"#%EA%B8%80%EC%9D%84-%EB%A7%88%EC%B9%98%EB%A9%B0\" aria-label=\"글을 마치며 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>글을 마치며</h2>\n<p>custom hooks는 리액트가 컴포넌트뿐만 아니라 상태관리 로직까지 재활용할 수 있도록 만들어 주었습니다. Hooks 덕분에 프론트엔드 개발이 더 재미있고 간편해진 것 같습니다.</p>\n<p>하지만 그 간편함이 독이 될 수 있습니다. 멋모르고 만들어 낸 custom hooks가 참사를 불러올 수 있으며, 프로젝트가 커짐에 따라 변경이나 디버깅을 어렵게 만들 수도 있습니다.</p>\n<p>반복되는 상태관리 로직이 보일 때, 그리고 그 로직을 Hook으로 만들어야겠다는 생각이 들었을 때, 한발짝 물러나 생각해보는 습관을 기르는 것은 충분히 값진 투자가 될 것이라고 생각합니다.</p>\n<blockquote>\n<h2 id=\"이걸-꼭-hook으로-만들어야-할까\"><a href=\"#%EC%9D%B4%EA%B1%B8-%EA%BC%AD-hook%EC%9C%BC%EB%A1%9C-%EB%A7%8C%EB%93%A4%EC%96%B4%EC%95%BC-%ED%95%A0%EA%B9%8C\" aria-label=\"이걸 꼭 hook으로 만들어야 할까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong><em>“이걸 꼭 Hook으로 만들어야 할까?”</em></strong></h2>\n</blockquote>","fields":{"slug":"../../static/custom-hooks-of-finda","tagSlugs":["/tag/hooks/","/tag/react/"]},"frontmatter":{"date":"2020-03-02T01:30:00.169Z","description":"Custom Hooks로 적합한 것과 그렇지 않은 것","tags":["hooks","react"],"title":"핀다에서 쓰는 React Custom Hooks"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"../../static/custom-hooks-of-finda"}}}